/**
 * @file examples.dox
 * @brief Usage examples for FreeRTOS C++ Wrappers
 * 
 * This file contains comprehensive examples demonstrating how to use
 * the FreeRTOS C++ Wrappers library in real-world scenarios.
 */

/**
 * @example basic_task_example.cpp
 * 
 * ## Basic Task Creation and Management
 * 
 * This example demonstrates how to create and manage FreeRTOS tasks using
 * the modern C++ wrapper classes.
 * 
 * ```cpp
 * #include "freertos.hpp"
 * 
 * int main() {
 *     // Create a simple worker task
 *     freertos::task<1024> worker_task("Worker", 3, []() {
 *         int counter = 0;
 *         while (true) {
 *             printf("Worker task iteration: %d\n", ++counter);
 *             std::this_thread::sleep_for(std::chrono::seconds(1));
 *         }
 *     });
 * 
 *     // Create a periodic task that runs every 500ms
 *     freertos::periodic_task<512> timer_task("Timer", 2, 500ms, []() {
 *         static int timer_count = 0;
 *         printf("Timer task execution #%d\n", ++timer_count);
 *     });
 * 
 *     // Start the FreeRTOS scheduler
 *     vTaskStartScheduler();
 *     return 0;
 * }
 * ```
 */

/**
 * @example producer_consumer_example.cpp
 * 
 * ## Producer-Consumer Pattern with Queues
 * 
 * This example shows how to implement a producer-consumer pattern using
 * type-safe queues for inter-task communication.
 * 
 * ```cpp
 * #include "freertos.hpp"
 * 
 * struct WorkItem {
 *     int id;
 *     std::string description;
 *     float priority;
 * };
 * 
 * int main() {
 *     // Create a queue for work items
 *     freertos::queue<10, WorkItem> work_queue("WorkQueue");
 * 
 *     // Producer task
 *     freertos::task<1024> producer("Producer", 4, [&]() {
 *         int item_id = 0;
 *         while (true) {
 *             WorkItem item{
 *                 ++item_id,
 *                 "Task " + std::to_string(item_id),
 *                 static_cast<float>(item_id) * 0.1f
 *             };
 * 
 *             if (work_queue.send(item, std::chrono::seconds(1))) {
 *                 printf("Produced item %d\n", item.id);
 *             } else {
 *                 printf("Failed to produce item %d - queue full\n", item.id);
 *             }
 * 
 *             std::this_thread::sleep_for(std::chrono::milliseconds(800));
 *         }
 *     });
 * 
 *     // Consumer task
 *     freertos::task<1024> consumer("Consumer", 3, [&]() {
 *         while (true) {
 *             WorkItem item;
 *             if (work_queue.receive(item, std::chrono::seconds(2))) {
 *                 printf("Consumed item %d: %s (priority: %.1f)\n",
 *                        item.id, item.description.c_str(), item.priority);
 * 
 *                 // Simulate work processing time
 *                 std::this_thread::sleep_for(
 *                     std::chrono::milliseconds(static_cast<int>(500 / item.priority))
 *                 );
 *             } else {
 *                 printf("Consumer timeout - no work available\n");
 *             }
 *         }
 *     });
 * 
 *     vTaskStartScheduler();
 *     return 0;
 * }
 * ```
 */

/**
 * @example synchronization_example.cpp
 * 
 * ## Advanced Synchronization with Event Groups
 * 
 * This example demonstrates complex synchronization scenarios using
 * event groups for coordinating multiple tasks.
 * 
 * ```cpp
 * #include "freertos.hpp"
 * 
 * // Event bits for system state
 * constexpr EventBits_t NETWORK_READY   = BIT0;
 * constexpr EventBits_t DATABASE_READY  = BIT1;
 * constexpr EventBits_t SENSORS_READY   = BIT2;
 * constexpr EventBits_t ALL_SYSTEMS     = NETWORK_READY | DATABASE_READY | SENSORS_READY;
 * 
 * freertos::event_group system_events;
 * freertos::binary_semaphore shutdown_signal;
 * 
 * int main() {
 *     // Network initialization task
 *     freertos::task<1024> network_init("NetworkInit", 5, [&]() {
 *         printf("Initializing network...\n");
 *         std::this_thread::sleep_for(std::chrono::seconds(2));
 *         printf("Network ready!\n");
 *         system_events.set_bits(NETWORK_READY);
 *     });
 * 
 *     // Database initialization task
 *     freertos::task<1024> db_init("DatabaseInit", 5, [&]() {
 *         printf("Initializing database...\n");
 *         std::this_thread::sleep_for(std::chrono::milliseconds(1500));
 *         printf("Database ready!\n");
 *         system_events.set_bits(DATABASE_READY);
 *     });
 * 
 *     // Sensor initialization task
 *     freertos::task<512> sensor_init("SensorInit", 5, [&]() {
 *         printf("Initializing sensors...\n");
 *         std::this_thread::sleep_for(std::chrono::milliseconds(1000));
 *         printf("Sensors ready!\n");
 *         system_events.set_bits(SENSORS_READY);
 *     });
 * 
 *     // Main application task
 *     freertos::task<2048> main_app("MainApp", 3, [&]() {
 *         printf("Waiting for all systems to initialize...\n");
 * 
 *         // Wait for all subsystems to be ready
 *         if (system_events.wait_bits(ALL_SYSTEMS, true, true, std::chrono::seconds(10))) {
 *             printf("All systems ready! Starting main application...\n");
 * 
 *             // Main application loop
 *             int cycle = 0;
 *             while (true) {
 *                 printf("Application cycle %d\n", ++cycle);
 * 
 *                 // Check for shutdown signal
 *                 if (shutdown_signal.take(std::chrono::milliseconds(100))) {
 *                     printf("Shutdown signal received\n");
 *                     break;
 *                 }
 * 
 *                 std::this_thread::sleep_for(std::chrono::seconds(1));
 *             }
 *         } else {
 *             printf("Timeout waiting for system initialization!\n");
 *         }
 *     });
 * 
 *     // Simulated shutdown task (for demonstration)
 *     freertos::task<512> shutdown_task("ShutdownTask", 1, [&]() {
 *         std::this_thread::sleep_for(std::chrono::seconds(15));
 *         printf("Triggering shutdown...\n");
 *         shutdown_signal.give();
 *     });
 * 
 *     vTaskStartScheduler();
 *     return 0;
 * }
 * ```
 */

/**
 * @example static_allocation_example.cpp
 * 
 * ## Static Memory Allocation Example
 * 
 * This example shows how to use static memory allocation for deterministic
 * memory usage, which is important in safety-critical applications.
 * 
 * ```cpp
 * #include "freertos.hpp"
 * 
 * int main() {
 *     // Static task allocation - no heap usage
 *     freertos::task<1024, freertos::static_task_allocator<1024>> 
 *         static_task("StaticTask", 3, []() {
 *             while (true) {
 *                 printf("Static task running\n");
 *                 vTaskDelay(pdMS_TO_TICKS(1000));
 *             }
 *         });
 * 
 *     // Static semaphore allocation
 *     freertos::binary_semaphore<freertos::static_semaphore_allocator> 
 *         static_semaphore;
 * 
 *     // Static queue allocation
 *     freertos::queue<8, int, freertos::static_queue_allocator<8, int>> 
 *         static_queue;
 * 
 *     // Use the static objects normally
 *     freertos::task<512, freertos::static_task_allocator<512>> 
 *         producer("Producer", 2, [&]() {
 *             for (int i = 0; i < 16; ++i) {
 *                 if (static_queue.send(i, 1000ms)) {
 *                     printf("Sent: %d\n", i);
 *                 }
 *                 vTaskDelay(pdMS_TO_TICKS(500));
 *             }
 *             static_semaphore.give(); // Signal completion
 *         });
 * 
 *     freertos::task<512, freertos::static_task_allocator<512>> 
 *         consumer("Consumer", 2, [&]() {
 *             while (true) {
 *                 int value;
 *                 if (static_queue.receive(value, 2000ms)) {
 *                     printf("Received: %d\n", value);
 *                 } else {
 *                     // Check if producer is done
 *                     if (static_semaphore.take(0ms)) {
 *                         printf("Producer finished, consumer exiting\n");
 *                         break;
 *                     }
 *                 }
 *             }
 *         });
 * 
 *     vTaskStartScheduler();
 *     return 0;
 * }
 * ```
 */