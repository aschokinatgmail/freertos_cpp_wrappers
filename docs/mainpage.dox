/**
 * @mainpage FreeRTOS C++ Wrappers Documentation
 * 
 * @section intro_sec Introduction
 * 
 * Welcome to the **FreeRTOS C++ Wrappers** library documentation! This modern C++17 library provides 
 * lightweight, RAII-compliant wrappers for FreeRTOS APIs, making it easier and safer to use FreeRTOS 
 * in C++ applications.
 * 
 * <div class="feature-grid">
 * <div class="feature-card">
 *   <div class="feature-icon">üõ°Ô∏è</div>
 *   <div class="feature-title">Type Safety</div>
 *   <div class="feature-description">Modern C++17 RAII wrappers ensure proper resource management and type safety</div>
 * </div>
 * <div class="feature-card">
 *   <div class="feature-icon">‚ö°</div>
 *   <div class="feature-title">High Performance</div>
 *   <div class="feature-description">Zero-overhead abstractions that don't compromise on performance</div>
 * </div>
 * <div class="feature-card">
 *   <div class="feature-icon">üîß</div>
 *   <div class="feature-title">Easy to Use</div>
 *   <div class="feature-description">Intuitive API design that leverages modern C++ features</div>
 * </div>
 * <div class="feature-card">
 *   <div class="feature-icon">üß™</div>
 *   <div class="feature-title">Well Tested</div>
 *   <div class="feature-description">439 comprehensive tests covering all functionality</div>
 * </div>
 * <div class="feature-card">
 *   <div class="feature-icon">üì±</div>
 *   <div class="feature-title">Flexible Allocation</div>
 *   <div class="feature-description">Support for both static and dynamic memory allocation strategies</div>
 * </div>
 * <div class="feature-card">
 *   <div class="feature-icon">‚è±Ô∏è</div>
 *   <div class="feature-title">Chrono Support</div>
 *   <div class="feature-description">Full std::chrono compatibility for timeout handling</div>
 * </div>
 * </div>
 * 
 * @section features_sec Key Features
 * 
 * - **Modern C++17 RAII wrappers** for all major FreeRTOS APIs
 * - **Comprehensive test coverage** with 439 automated tests
 * - **Static analysis integration** with clang-tidy
 * - **Dual allocation support** for both static and dynamic strategies
 * - **std::chrono compatibility** for intuitive timeout handling
 * - **Move semantics support** for efficient resource management
 * - **Thread-safe operations** with proper synchronization
 * 
 * @section quick_start Quick Start Guide
 * 
 * <div class="quickstart">
 * <h3>Getting Started in 3 Steps</h3>
 * 
 * **1. Include the library header:**
 * ```cpp
 * #include "freertos.hpp"
 * ```
 * 
 * **2. Create and use FreeRTOS objects:**
 * ```cpp
 * // Create a task with dynamic allocation
 * freertos::task<1024> my_task("MyTask", 5, []() {
 *     while (true) {
 *         // Your task code here
 *         vTaskDelay(pdMS_TO_TICKS(1000));
 *     }
 * });
 * ```
 * 
 * **3. Start the scheduler:**
 * ```cpp
 * vTaskStartScheduler();
 * ```
 * </div>
 * 
 * @section examples_sec Usage Examples
 * 
 * ### Task Management
 * 
 * <div class="example">
 * <div class="example-title">Creating and Managing Tasks</div>
 * 
 * ```cpp
 * #include "freertos_task.hpp"
 * 
 * // Create a task with dynamic allocation (1024 bytes stack)
 * freertos::task<1024> worker_task("WorkerTask", 3, []() {
 *     while (true) {
 *         // Perform work
 *         printf("Worker task running\\n");
 *         std::this_thread::sleep_for(std::chrono::seconds(1));
 *     }
 * });
 * 
 * // Create a periodic task that runs every 100ms
 * freertos::periodic_task<512> timer_task("TimerTask", 2, 100ms, []() {
 *     static int counter = 0;
 *     printf("Periodic task execution #%d\\n", ++counter);
 * });
 * 
 * // Tasks are automatically cleaned up when they go out of scope
 * ```
 * </div>
 * 
 * ### Synchronization with Semaphores
 * 
 * <div class="example">
 * <div class="example-title">Binary and Counting Semaphores</div>
 * 
 * ```cpp
 * #include "freertos_semaphore.hpp"
 * 
 * // Binary semaphore for signaling
 * freertos::binary_semaphore signal_sem;
 * 
 * // Producer task
 * freertos::task<512> producer("Producer", 4, [&]() {
 *     while (true) {
 *         // Produce data
 *         produce_data();
 *         
 *         // Signal consumer
 *         signal_sem.give();
 *         
 *         std::this_thread::sleep_for(std::chrono::milliseconds(500));
 *     }
 * });
 * 
 * // Consumer task
 * freertos::task<512> consumer("Consumer", 3, [&]() {
 *     while (true) {
 *         // Wait for signal with timeout
 *         if (signal_sem.take(std::chrono::seconds(1))) {
 *             consume_data();
 *         } else {
 *             printf("Timeout waiting for data\\n");
 *         }
 *     }
 * });
 * ```
 * </div>
 * 
 * ### Thread-Safe Queues
 * 
 * <div class="example">
 * <div class="example-title">Type-Safe Message Passing</div>
 * 
 * ```cpp
 * #include "freertos_queue.hpp"
 * 
 * struct Message {
 *     int id;
 *     std::string data;
 * };
 * 
 * // Create a queue for 10 messages
 * freertos::queue<Message, 10> msg_queue;
 * 
 * // Sender task
 * freertos::task<1024> sender("Sender", 3, [&]() {
 *     int id = 0;
 *     while (true) {
 *         Message msg{id++, "Hello from sender"};
 *         
 *         // Send with timeout
 *         if (msg_queue.send(msg, std::chrono::milliseconds(100))) {
 *             printf("Message %d sent\\n", msg.id);
 *         } else {
 *             printf("Failed to send message %d\\n", msg.id);
 *         }
 *         
 *         std::this_thread::sleep_for(std::chrono::seconds(1));
 *     }
 * });
 * 
 * // Receiver task
 * freertos::task<1024> receiver("Receiver", 3, [&]() {
 *     while (true) {
 *         Message msg;
 *         
 *         // Receive with timeout
 *         if (msg_queue.receive(msg, std::chrono::seconds(2))) {
 *             printf("Received: ID=%d, Data=%s\\n", msg.id, msg.data.c_str());
 *         } else {
 *             printf("No message received\\n");
 *         }
 *     }
 * });
 * ```
 * </div>
 * 
 * ### Mutex and Lock Guards
 * 
 * <div class="example">
 * <div class="example-title">Thread-Safe Resource Access</div>
 * 
 * ```cpp
 * #include "freertos_semaphore.hpp"
 * 
 * class SharedResource {
 * private:
 *     freertos::mutex mtx;
 *     int counter = 0;
 * 
 * public:
 *     void increment() {
 *         // RAII lock guard automatically unlocks when leaving scope
 *         freertos::lock_guard<freertos::mutex> lock(mtx);
 *         ++counter;
 *         printf("Counter: %d\\n", counter);
 *     }
 *     
 *     bool try_increment() {
 *         // Try to acquire lock without blocking
 *         freertos::try_lock_guard<freertos::mutex> lock(mtx);
 *         if (lock.owns_lock()) {
 *             ++counter;
 *             printf("Counter: %d\\n", counter);
 *             return true;
 *         }
 *         return false;
 *     }
 *     
 *     bool timed_increment() {
 *         // Try to acquire lock with timeout
 *         freertos::timeout_lock_guard<freertos::mutex> lock(mtx, 100ms);
 *         if (lock.owns_lock()) {
 *             ++counter;
 *             printf("Counter: %d\\n", counter);
 *             return true;
 *         }
 *         return false;
 *     }
 * };
 * ```
 * </div>
 * 
 * ### Event Groups for Complex Synchronization
 * 
 * <div class="example">
 * <div class="example-title">Multi-Event Synchronization</div>
 * 
 * ```cpp
 * #include "freertos_event_group.hpp"
 * 
 * freertos::event_group system_events;
 * 
 * constexpr EventBits_t NETWORK_READY = BIT0;
 * constexpr EventBits_t SENSOR_READY = BIT1;
 * constexpr EventBits_t STORAGE_READY = BIT2;
 * constexpr EventBits_t ALL_READY = NETWORK_READY | SENSOR_READY | STORAGE_READY;
 * 
 * // Initialization task
 * freertos::task<1024> init_task("Init", 5, [&]() {
 *     // Initialize network
 *     init_network();
 *     system_events.set_bits(NETWORK_READY);
 *     
 *     // Initialize sensors
 *     init_sensors();
 *     system_events.set_bits(SENSOR_READY);
 *     
 *     // Initialize storage
 *     init_storage();
 *     system_events.set_bits(STORAGE_READY);
 * });
 * 
 * // Main application task
 * freertos::task<2048> app_task("App", 3, [&]() {
 *     // Wait for all subsystems to be ready
 *     if (system_events.wait_bits(ALL_READY, true, true, std::chrono::seconds(10))) {
 *         printf("All systems ready, starting application\\n");
 *         run_application();
 *     } else {
 *         printf("Timeout waiting for system initialization\\n");
 *     }
 * });
 * ```
 * </div>
 * 
 * @section allocation_sec Memory Allocation Strategies
 * 
 * The library supports both static and dynamic memory allocation strategies:
 * 
 * ### Dynamic Allocation (Default)
 * ```cpp
 * // Uses FreeRTOS heap
 * freertos::task<1024> dynamic_task("Task", 3, task_function);
 * freertos::binary_semaphore dynamic_sem;
 * freertos::queue<int, 10> dynamic_queue;
 * ```
 * 
 * ### Static Allocation
 * ```cpp
 * // Uses stack-allocated memory
 * freertos::task<1024, freertos::static_task_allocator<1024>> static_task("Task", 3, task_function);
 * freertos::binary_semaphore<freertos::static_semaphore_allocator> static_sem;
 * freertos::queue<int, 10, freertos::static_queue_allocator<int, 10>> static_queue;
 * ```
 * 
 * @section testing_sec Testing and Quality Assurance
 * 
 * The library includes comprehensive testing with:
 * 
 * - **439 automated tests** covering all functionality
 * - **97.0% line coverage** and **98.2% function coverage**
 * - **Static analysis** with clang-tidy integration
 * - **Continuous integration** with automated validation
 * 
 * ### Running Tests
 * ```bash
 * mkdir build && cd build
 * cmake -DENABLE_COVERAGE=ON ..
 * make -j$(nproc)
 * ctest --verbose
 * ```
 * 
 * @section building_sec Building the Library
 * 
 * ### Prerequisites
 * - C++17 compatible compiler
 * - CMake 3.12+
 * - FreeRTOS source code
 * 
 * ### Build Configuration
 * ```bash
 * git clone <repository>
 * cd freertos_cpp_wrappers
 * mkdir build && cd build
 * cmake -DENABLE_COVERAGE=ON -DENABLE_CLANG_TIDY=ON ..
 * make -j$(nproc)
 * ```
 * 
 * ### CMake Options
 * - `ENABLE_CLANG_TIDY` (default: ON) - Enable static analysis
 * - `CLANG_TIDY_WARNINGS_AS_ERRORS` (default: OFF) - Treat warnings as errors  
 * - `GENERATE_CLANG_TIDY_REPORT` (default: ON) - Generate static analysis report
 * - `ENABLE_COVERAGE` (default: OFF) - Enable code coverage collection
 * 
 * @section best_practices Best Practices
 * 
 * ### Resource Management
 * - Always use RAII wrappers instead of raw FreeRTOS handles
 * - Prefer stack allocation for short-lived objects
 * - Use move semantics for transferring ownership
 * 
 * ### Task Design
 * - Keep tasks focused on single responsibilities  
 * - Use appropriate stack sizes based on actual usage
 * - Implement proper error handling and recovery
 * 
 * ### Synchronization
 * - Prefer higher-level synchronization primitives (mutexes, semaphores)
 * - Use timeouts to avoid indefinite blocking
 * - Design for deadlock-free operation
 * 
 * ### Performance
 * - Profile actual memory and CPU usage
 * - Use static allocation for deterministic behavior
 * - Minimize dynamic memory allocation in time-critical paths
 * 
 * @section api_reference API Reference
 * 
 * Explore the detailed API documentation:
 * 
 * - @ref freertos::task "Task Management" - Create and manage FreeRTOS tasks
 * - @ref freertos::binary_semaphore "Semaphores" - Binary, counting, and mutex semaphores  
 * - @ref freertos::queue "Queues" - Type-safe message passing
 * - @ref freertos::event_group "Event Groups" - Multi-event synchronization
 * - @ref freertos::stream_buffer "Stream Buffers" - Byte stream communication
 * - @ref freertos::message_buffer "Message Buffers" - Variable-length message passing
 * 
 * @section contributing_sec Contributing
 * 
 * We welcome contributions! Please see our [GitHub repository](https://github.com/aschokinatgmail/freertos_cpp_wrappers) 
 * for guidelines on:
 * 
 * - Reporting issues and requesting features
 * - Submitting pull requests
 * - Code style and testing requirements
 * - Documentation improvements
 * 
 * @section license_sec License
 * 
 * This library is licensed under the MIT License. See the LICENSE file for details.
 * 
 * @author Andrey V. Shchekin <aschokin@gmail.com>
 * @version 1.0.0
 * @date 2024
 */